// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChainlinkCancelled extends ethereum.Event {
  get params(): ChainlinkCancelled__Params {
    return new ChainlinkCancelled__Params(this);
  }
}

export class ChainlinkCancelled__Params {
  _event: ChainlinkCancelled;

  constructor(event: ChainlinkCancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ChainlinkFulfilled extends ethereum.Event {
  get params(): ChainlinkFulfilled__Params {
    return new ChainlinkFulfilled__Params(this);
  }
}

export class ChainlinkFulfilled__Params {
  _event: ChainlinkFulfilled;

  constructor(event: ChainlinkFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ChainlinkRequested extends ethereum.Event {
  get params(): ChainlinkRequested__Params {
    return new ChainlinkRequested__Params(this);
  }
}

export class ChainlinkRequested__Params {
  _event: ChainlinkRequested;

  constructor(event: ChainlinkRequested) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProductAdded extends ethereum.Event {
  get params(): ProductAdded__Params {
    return new ProductAdded__Params(this);
  }
}

export class ProductAdded__Params {
  _event: ProductAdded;

  constructor(event: ProductAdded) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get duration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ProxyCreated extends ethereum.Event {
  get params(): ProxyCreated__Params {
    return new ProxyCreated__Params(this);
  }
}

export class ProxyCreated__Params {
  _event: ProxyCreated;

  constructor(event: ProxyCreated) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Rent extends ethereum.Event {
  get params(): Rent__Params {
    return new Rent__Params(this);
  }
}

export class Rent__Params {
  _event: Rent;

  constructor(event: Rent) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get borrowedAt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Return extends ethereum.Event {
  get params(): Return__Params {
    return new Return__Params(this);
  }
}

export class Return__Params {
  _event: Return;

  constructor(event: Return) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Contract__assetsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  aDaiAddress(): Address {
    let result = super.call("aDaiAddress", "aDaiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_aDaiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("aDaiAddress", "aDaiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assets(param0: Address, param1: BigInt): Contract__assetsResult {
    let result = super.call(
      "assets",
      "assets(address,uint256):(address,address,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__assetsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_assets(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__assetsResult> {
    let result = super.tryCall(
      "assets",
      "assets(address,uint256):(address,address,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__assetsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  calculateCollateral(
    _nft: Address,
    _tokenId: BigInt,
    _duration: BigInt
  ): BigInt {
    let result = super.call(
      "calculateCollateral",
      "calculateCollateral(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_duration)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateCollateral(
    _nft: Address,
    _tokenId: BigInt,
    _duration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCollateral",
      "calculateCollateral(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_duration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralDailyFee(): BigInt {
    let result = super.call(
      "collateralDailyFee",
      "collateralDailyFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralDailyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralDailyFee",
      "collateralDailyFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daiAddress(): Address {
    let result = super.call("daiAddress", "daiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_daiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiAddress", "daiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployMinimal(_logic: Address, _data: Bytes): Address {
    let result = super.call(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );

    return result[0].toAddress();
  }

  try_deployMinimal(
    _logic: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendingPool(): Address {
    let result = super.call("lendingPool", "lendingPool():(address)", []);

    return result[0].toAddress();
  }

  try_lendingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("lendingPool", "lendingPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendingPoolAddressProvider(): Address {
    let result = super.call(
      "lendingPoolAddressProvider",
      "lendingPoolAddressProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lendingPoolAddressProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingPoolAddressProvider",
      "lendingPoolAddressProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendingPoolCore(): Address {
    let result = super.call(
      "lendingPoolCore",
      "lendingPoolCore():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lendingPoolCore(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingPoolCore",
      "lendingPoolCore():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyBaseAddress(): Address {
    let result = super.call(
      "proxyBaseAddress",
      "proxyBaseAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_proxyBaseAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proxyBaseAddress",
      "proxyBaseAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyInfo(param0: Address, param1: Address): Address {
    let result = super.call(
      "proxyInfo",
      "proxyInfo(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toAddress();
  }

  try_proxyInfo(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proxyInfo",
      "proxyInfo(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _proxyBaseAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddProductCall extends ethereum.Call {
  get inputs(): AddProductCall__Inputs {
    return new AddProductCall__Inputs(this);
  }

  get outputs(): AddProductCall__Outputs {
    return new AddProductCall__Outputs(this);
  }
}

export class AddProductCall__Inputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _url(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddProductCall__Outputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }
}

export class DeployMinimalCall extends ethereum.Call {
  get inputs(): DeployMinimalCall__Inputs {
    return new DeployMinimalCall__Inputs(this);
  }

  get outputs(): DeployMinimalCall__Outputs {
    return new DeployMinimalCall__Outputs(this);
  }
}

export class DeployMinimalCall__Inputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployMinimalCall__Outputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class FetchNFTPriceBeforeReturnCall extends ethereum.Call {
  get inputs(): FetchNFTPriceBeforeReturnCall__Inputs {
    return new FetchNFTPriceBeforeReturnCall__Inputs(this);
  }

  get outputs(): FetchNFTPriceBeforeReturnCall__Outputs {
    return new FetchNFTPriceBeforeReturnCall__Outputs(this);
  }
}

export class FetchNFTPriceBeforeReturnCall__Inputs {
  _call: FetchNFTPriceBeforeReturnCall;

  constructor(call: FetchNFTPriceBeforeReturnCall) {
    this._call = call;
  }

  get _url(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class FetchNFTPriceBeforeReturnCall__Outputs {
  _call: FetchNFTPriceBeforeReturnCall;

  constructor(call: FetchNFTPriceBeforeReturnCall) {
    this._call = call;
  }
}

export class FulfillCall extends ethereum.Call {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get _requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }
}

export class FulfillExternalCall extends ethereum.Call {
  get inputs(): FulfillExternalCall__Inputs {
    return new FulfillExternalCall__Inputs(this);
  }

  get outputs(): FulfillExternalCall__Outputs {
    return new FulfillExternalCall__Outputs(this);
  }
}

export class FulfillExternalCall__Inputs {
  _call: FulfillExternalCall;

  constructor(call: FulfillExternalCall) {
    this._call = call;
  }

  get _requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FulfillExternalCall__Outputs {
  _call: FulfillExternalCall;

  constructor(call: FulfillExternalCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class RentCall extends ethereum.Call {
  get inputs(): RentCall__Inputs {
    return new RentCall__Inputs(this);
  }

  get outputs(): RentCall__Outputs {
    return new RentCall__Outputs(this);
  }
}

export class RentCall__Inputs {
  _call: RentCall;

  constructor(call: RentCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nft(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RentCall__Outputs {
  _call: RentCall;

  constructor(call: RentCall) {
    this._call = call;
  }
}

export class ReturnNFTCall extends ethereum.Call {
  get inputs(): ReturnNFTCall__Inputs {
    return new ReturnNFTCall__Inputs(this);
  }

  get outputs(): ReturnNFTCall__Outputs {
    return new ReturnNFTCall__Outputs(this);
  }
}

export class ReturnNFTCall__Inputs {
  _call: ReturnNFTCall;

  constructor(call: ReturnNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReturnNFTCall__Outputs {
  _call: ReturnNFTCall;

  constructor(call: ReturnNFTCall) {
    this._call = call;
  }
}
