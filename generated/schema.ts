// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Product extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Product entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Product entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Product", id.toString(), this);
  }

  static load(id: string): Product | null {
    return store.get("Product", id) as Product | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get borrowedAt(): BigInt {
    let value = this.get("borrowedAt");
    return value.toBigInt();
  }

  set borrowedAt(value: BigInt) {
    this.set("borrowedAt", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get available(): boolean {
    let value = this.get("available");
    return value.toBoolean();
  }

  set available(value: boolean) {
    this.set("available", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftRented(): Array<string> | null {
    let value = this.get("nftRented");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftRented(value: Array<string> | null) {
    if (value === null) {
      this.unset("nftRented");
    } else {
      this.set("nftRented", Value.fromStringArray(value as Array<string>));
    }
  }

  get nftOwned(): Array<string> | null {
    let value = this.get("nftOwned");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftOwned(value: Array<string> | null) {
    if (value === null) {
      this.unset("nftOwned");
    } else {
      this.set("nftOwned", Value.fromStringArray(value as Array<string>));
    }
  }
}
